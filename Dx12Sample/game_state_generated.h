// automatically generated by the FlatBuffers compiler, do not modify


#ifndef FLATBUFFERS_GENERATED_GAMESTATE_PHYSICSSIMULATION_NETWORKING_H_
#define FLATBUFFERS_GENERATED_GAMESTATE_PHYSICSSIMULATION_NETWORKING_H_

#include "pch.h"
#include "flatbuffers/flatbuffers.h"

// Ensure the included flatbuffers.h is the same version as when this file was
// generated, otherwise it may not be compatible.
static_assert(FLATBUFFERS_VERSION_MAJOR == 25 &&
              FLATBUFFERS_VERSION_MINOR == 2 &&
              FLATBUFFERS_VERSION_REVISION == 10,
             "Non-compatible flatbuffers version included");

namespace Networking {

struct Vec3;

struct Vec4;

struct GameObjectState;
struct GameObjectStateBuilder;

struct StateUpdate;
struct StateUpdateBuilder;

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec3 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;

 public:
  Vec3()
      : x_(0),
        y_(0),
        z_(0) {
  }
  Vec3(float _x, float _y, float _z)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
};
FLATBUFFERS_STRUCT_END(Vec3, 12);

FLATBUFFERS_MANUALLY_ALIGNED_STRUCT(4) Vec4 FLATBUFFERS_FINAL_CLASS {
 private:
  float x_;
  float y_;
  float z_;
  float w_;

 public:
  Vec4()
      : x_(0),
        y_(0),
        z_(0),
        w_(0) {
  }
  Vec4(float _x, float _y, float _z, float _w)
      : x_(::flatbuffers::EndianScalar(_x)),
        y_(::flatbuffers::EndianScalar(_y)),
        z_(::flatbuffers::EndianScalar(_z)),
        w_(::flatbuffers::EndianScalar(_w)) {
  }
  float x() const {
    return ::flatbuffers::EndianScalar(x_);
  }
  float y() const {
    return ::flatbuffers::EndianScalar(y_);
  }
  float z() const {
    return ::flatbuffers::EndianScalar(z_);
  }
  float w() const {
    return ::flatbuffers::EndianScalar(w_);
  }
};
FLATBUFFERS_STRUCT_END(Vec4, 16);

struct GameObjectState FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef GameObjectStateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_ID = 4,
    VT_TYPE = 6,
    VT_POSITION = 8,
    VT_ROTATION = 10,
    VT_VELOCITY = 12,
    VT_ANGULAR_VELOCITY = 14,
    VT_COLOR = 16
  };
  int32_t id() const {
    return GetField<int32_t>(VT_ID, 0);
  }
  int32_t type() const {
    return GetField<int32_t>(VT_TYPE, 0);
  }
  const Networking::Vec3 *position() const {
    return GetStruct<const Networking::Vec3 *>(VT_POSITION);
  }
  const Networking::Vec4 *rotation() const {
    return GetStruct<const Networking::Vec4 *>(VT_ROTATION);
  }
  const Networking::Vec3 *velocity() const {
    return GetStruct<const Networking::Vec3 *>(VT_VELOCITY);
  }
  const Networking::Vec3 *angular_velocity() const {
    return GetStruct<const Networking::Vec3 *>(VT_ANGULAR_VELOCITY);
  }
  const Networking::Vec4 *color() const {
    return GetStruct<const Networking::Vec4 *>(VT_COLOR);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyField<int32_t>(verifier, VT_ID, 4) &&
           VerifyField<int32_t>(verifier, VT_TYPE, 4) &&
           VerifyField<Networking::Vec3>(verifier, VT_POSITION, 4) &&
           VerifyField<Networking::Vec4>(verifier, VT_ROTATION, 4) &&
           VerifyField<Networking::Vec3>(verifier, VT_VELOCITY, 4) &&
           VerifyField<Networking::Vec3>(verifier, VT_ANGULAR_VELOCITY, 4) &&
           VerifyField<Networking::Vec4>(verifier, VT_COLOR, 4) &&
           verifier.EndTable();
  }
};

struct GameObjectStateBuilder {
  typedef GameObjectState Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_id(int32_t id) {
    fbb_.AddElement<int32_t>(GameObjectState::VT_ID, id, 0);
  }
  void add_type(int32_t type) {
    fbb_.AddElement<int32_t>(GameObjectState::VT_TYPE, type, 0);
  }
  void add_position(const Networking::Vec3 *position) {
    fbb_.AddStruct(GameObjectState::VT_POSITION, position);
  }
  void add_rotation(const Networking::Vec4 *rotation) {
    fbb_.AddStruct(GameObjectState::VT_ROTATION, rotation);
  }
  void add_velocity(const Networking::Vec3 *velocity) {
    fbb_.AddStruct(GameObjectState::VT_VELOCITY, velocity);
  }
  void add_angular_velocity(const Networking::Vec3 *angular_velocity) {
    fbb_.AddStruct(GameObjectState::VT_ANGULAR_VELOCITY, angular_velocity);
  }
  void add_color(const Networking::Vec4 *color) {
    fbb_.AddStruct(GameObjectState::VT_COLOR, color);
  }
  explicit GameObjectStateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<GameObjectState> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<GameObjectState>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<GameObjectState> CreateGameObjectState(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    int32_t id = 0,
    int32_t type = 0,
    const Networking::Vec3 *position = nullptr,
    const Networking::Vec4 *rotation = nullptr,
    const Networking::Vec3 *velocity = nullptr,
    const Networking::Vec3 *angular_velocity = nullptr,
    const Networking::Vec4 *color = nullptr) {
  GameObjectStateBuilder builder_(_fbb);
  builder_.add_color(color);
  builder_.add_angular_velocity(angular_velocity);
  builder_.add_velocity(velocity);
  builder_.add_rotation(rotation);
  builder_.add_position(position);
  builder_.add_type(type);
  builder_.add_id(id);
  return builder_.Finish();
}

struct StateUpdate FLATBUFFERS_FINAL_CLASS : private ::flatbuffers::Table {
  typedef StateUpdateBuilder Builder;
  enum FlatBuffersVTableOffset FLATBUFFERS_VTABLE_UNDERLYING_TYPE {
    VT_OBJECTS = 4
  };
  const ::flatbuffers::Vector<::flatbuffers::Offset<Networking::GameObjectState>> *objects() const {
    return GetPointer<const ::flatbuffers::Vector<::flatbuffers::Offset<Networking::GameObjectState>> *>(VT_OBJECTS);
  }
  bool Verify(::flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffset(verifier, VT_OBJECTS) &&
           verifier.VerifyVector(objects()) &&
           verifier.VerifyVectorOfTables(objects()) &&
           verifier.EndTable();
  }
};

struct StateUpdateBuilder {
  typedef StateUpdate Table;
  ::flatbuffers::FlatBufferBuilder &fbb_;
  ::flatbuffers::uoffset_t start_;
  void add_objects(::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Networking::GameObjectState>>> objects) {
    fbb_.AddOffset(StateUpdate::VT_OBJECTS, objects);
  }
  explicit StateUpdateBuilder(::flatbuffers::FlatBufferBuilder &_fbb)
        : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  ::flatbuffers::Offset<StateUpdate> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = ::flatbuffers::Offset<StateUpdate>(end);
    return o;
  }
};

inline ::flatbuffers::Offset<StateUpdate> CreateStateUpdate(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    ::flatbuffers::Offset<::flatbuffers::Vector<::flatbuffers::Offset<Networking::GameObjectState>>> objects = 0) {
  StateUpdateBuilder builder_(_fbb);
  builder_.add_objects(objects);
  return builder_.Finish();
}

inline ::flatbuffers::Offset<StateUpdate> CreateStateUpdateDirect(
    ::flatbuffers::FlatBufferBuilder &_fbb,
    const std::vector<::flatbuffers::Offset<Networking::GameObjectState>> *objects = nullptr) {
  auto objects__ = objects ? _fbb.CreateVector<::flatbuffers::Offset<Networking::GameObjectState>>(*objects) : 0;
  return Networking::CreateStateUpdate(
      _fbb,
      objects__);
}

inline const Networking::StateUpdate *GetStateUpdate(const void *buf) {
  return ::flatbuffers::GetRoot<Networking::StateUpdate>(buf);
}

inline const Networking::StateUpdate *GetSizePrefixedStateUpdate(const void *buf) {
  return ::flatbuffers::GetSizePrefixedRoot<Networking::StateUpdate>(buf);
}

inline bool VerifyStateUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifyBuffer<Networking::StateUpdate>(nullptr);
}

inline bool VerifySizePrefixedStateUpdateBuffer(
    ::flatbuffers::Verifier &verifier) {
  return verifier.VerifySizePrefixedBuffer<Networking::StateUpdate>(nullptr);
}

inline void FinishStateUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Networking::StateUpdate> root) {
  fbb.Finish(root);
}

inline void FinishSizePrefixedStateUpdateBuffer(
    ::flatbuffers::FlatBufferBuilder &fbb,
    ::flatbuffers::Offset<Networking::StateUpdate> root) {
  fbb.FinishSizePrefixed(root);
}

}  // namespace Networking

#endif  // FLATBUFFERS_GENERATED_GAMESTATE_PHYSICSSIMULATION_NETWORKING_H_
